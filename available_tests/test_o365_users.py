#!/usr/bin/env python
"""
Checks that all Office 365 mail accounts are associated with a valid, and that
all users with administrator priviledges are known.

As Office365 has no REST API to query user accounts this script instead loads
CSV files generated by the export-office365-outlook-users.ps1 Powershell
script included in the scripts directory of the respoitory.

Note that an account can have multiple email addresses accosiated with it,
but it will be considered a pass if *ANY* of them are in

Required config.py variables:

OFFICE_365_VALID_EMAILS         list        A list of valid/epected email
                                            accounts

OFFICE_365_USERS_CSV_CONTENTS   string      The raw contents of the users.csv
                                            file generated by the
                                            export-office365-outlook-users.ps1
                                            script

OFFICE_365_ADMIN_TXT_CONTENTS   string      The raw contents of the admins.txt
                                            file generated by the
                                            export-office365-outlook-users.ps1
                                            script

OFFICE_365_ALLOWED_ADMINS       list        A list of allowed email addresses
                                            for administrator roles
"""

import os
import imp
import pytest
CONFIG = imp.load_source('config', os.environ['WATCHDOG_CONFIG_LOCATION'])


def _all_outlook_users():
    """
    Splits the contents of the users.csv file in to lines and tokenises each
    entry, verifying that each entry has at least one email address
    specified in OFFICE_365_VALID_EMAILS variable.
    """
    users = CONFIG.OFFICE_365_USERS_CSV_CONTENTS.split('\r\n')
    user_list = []
    for user in users:
        fields = [field[1:-1] for field in user.split(',')]
        if len(fields) > 1:
            display_name = fields[0]
            if display_name != "DisplayName":
                object_type = fields[1]
                if object_type == "UserMailbox":
                    email_addresses = fields[2]
                    emails = [mail.lower().split(":")[1].replace('"', '') for mail in email_addresses.split() if '@' in mail]
                    user_list.append((display_name, emails))
    return user_list

def _all_outlook_admin_users():
    """
    Splits the contents of the users.csv file in to lines and tokenises each
    entry, verifying that each entry has at least one email address
    specified in OFFICE_365_VALID_EMAILS variable.
    """
    admin_email_list = []
    admin_output = CONFIG.OFFICE_365_ADMIN_TXT_CONTENTS.split('\r\n')
    for line in admin_output:
        tokens = [field.lower() for field in line.split()]
        for token in tokens:
            if '@' in token:
                admin_email_list.append(token)
    return admin_email_list

@pytest.mark.parametrize("admin_email", _all_outlook_admin_users())
def test_outlook_admin_is_known(admin_email):
    """
    Splits the contents of admin.txt in to lines and ensures that each
    administrator email address is present in the OFFICE_365_ALLOWED_ADMINS
    variable.
    """
    assert admin_email in CONFIG.OFFICE_365_ALLOWED_ADMINS


@pytest.mark.parametrize("display_name,email_addresses", _all_outlook_users())
def test_outlook_user_is_valid(display_name, email_addresses):
    """
    Asserts that at least one email address associated with a user is valid
    :param displayname:    str           The display name of the user being
                                         tested. Not validated in any way, but
                                         included to ensure it's printed in the
                                         event of an assertion failure.
    :paramuser_emails:     list[string]  A list of all the email addresses
                                         associated with this user
    """
    assert display_name is not None
    # Check that at least one of the emails associated with this user is in LDAP
    matches = [email in CONFIG.OFFICE_365_VALID_EMAILS for email in email_addresses]
    assert True in matches
